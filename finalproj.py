# -*- coding: utf-8 -*-
"""finalproj.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1m1rWOQoH-kORAcJKpfUHMw0pNJmB3uDO
"""

from google.colab import drive
drive.mount('/content/drive')

import os
dataset_path = "/content/drive/MyDrive/dataset"  # Change this path as per your dataset location
os.chdir(dataset_path)

import tensorflow as tf
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.optimizers import Adam
import matplotlib.pyplot as plt
import numpy as np
from tensorflow.keras.preprocessing import image

import os

dataset_path = "/content/drive/MyDrive/dataset"  # Change this to your actual path

# Check if the dataset path exists
print("Dataset exists:", os.path.exists(dataset_path))
print("Train directory exists:", os.path.exists(dataset_path + "/train"))
print("Validate directory exists:", os.path.exists(dataset_path + "/validate"))
print("Test directory exists:", os.path.exists(dataset_path + "/test"))

# List files inside the dataset path
print("Folders inside dataset path:", os.listdir(dataset_path) if os.path.exists(dataset_path) else "Path does not exist")

# Define dataset paths
train_dir = dataset_path + "/content/drive/MyDrive/dataset/train"
valid_dir = dataset_path + "/content/drive/MyDrive/dataset/validate"
test_dir = dataset_path + "/content/drive/MyDrive/dataset/test"

# Data Augmentation & Normalization
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=20,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode='nearest')

valid_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

# Load Images
train_generator = train_datagen.flow_from_directory(train_dir, target_size=(150, 150),
                                                    batch_size=32, class_mode='binary')

valid_generator = valid_datagen.flow_from_directory(valid_dir, target_size=(150, 150),
                                                    batch_size=32, class_mode='binary')

test_generator = test_datagen.flow_from_directory(test_dir, target_size=(150, 150),
                                                  batch_size=32, class_mode='binary')

import os

dataset_path = "/content/drive/MyDrive/dataset"  # Fix this path

# Define dataset directories correctly
train_dir = os.path.join(dataset_path, "train")
valid_dir = os.path.join(dataset_path, "validate")
test_dir = os.path.join(dataset_path, "test")

# Check if directories exist
print("Dataset exists:", os.path.exists(dataset_path))
print("Train directory exists:", os.path.exists(train_dir))
print("Validate directory exists:", os.path.exists(valid_dir))
print("Test directory exists:", os.path.exists(test_dir))

# Check folders inside dataset
print("Folders inside dataset path:", os.listdir(dataset_path))

from tensorflow.keras.preprocessing.image import ImageDataGenerator

# Data Augmentation & Normalization
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=20,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode='nearest')

valid_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

# ðŸ”¹ Make sure train_dir is correctly assigned
train_generator = train_datagen.flow_from_directory(
    train_dir, target_size=(150, 150), batch_size=32, class_mode='binary')

valid_generator = valid_datagen.flow_from_directory(
    valid_dir, target_size=(150, 150), batch_size=32, class_mode='binary')

test_generator = test_datagen.flow_from_directory(
    test_dir, target_size=(150, 150), batch_size=32, class_mode='binary')

print("Data Generators Loaded Successfully!")

# Define dataset paths
train_dir = dataset_path + "/train"
valid_dir = dataset_path + "/validate"
test_dir = dataset_path + "/test"

# Data Augmentation & Normalization
train_datagen = ImageDataGenerator(rescale=1./255,
                                   rotation_range=20,
                                   width_shift_range=0.2,
                                   height_shift_range=0.2,
                                   shear_range=0.2,
                                   zoom_range=0.2,
                                   horizontal_flip=True,
                                   fill_mode='nearest')

valid_datagen = ImageDataGenerator(rescale=1./255)
test_datagen = ImageDataGenerator(rescale=1./255)

# Load Images
train_generator = train_datagen.flow_from_directory(train_dir, target_size=(150, 150),
                                                    batch_size=32, class_mode='binary')

valid_generator = valid_datagen.flow_from_directory(valid_dir, target_size=(150, 150),
                                                    batch_size=32, class_mode='binary')

test_generator = test_datagen.flow_from_directory(test_dir, target_size=(150, 150),
                                                  batch_size=32, class_mode='binary')

model = Sequential([
    Conv2D(32, (3, 3), activation='relu', input_shape=(150, 150, 3)),
    MaxPooling2D(2, 2),

    Conv2D(64, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Conv2D(128, (3, 3), activation='relu'),
    MaxPooling2D(2, 2),

    Flatten(),
    Dense(512, activation='relu'),
    Dropout(0.5),  # Prevents overfitting
    Dense(1, activation='sigmoid')  # Binary classification (corroded/non-corroded)
])

model.compile(optimizer=Adam(learning_rate=0.0001),
              loss='binary_crossentropy',
              metrics=['accuracy'])

model.summary()

history = model.fit(train_generator, validation_data=valid_generator, epochs=20)

test_loss, test_acc = model.evaluate(test_generator)
print(f"Test Accuracy: {test_acc * 100:.2f}%")

model.save("corrosion_detection_model.h5")
print("Model saved successfully!")

from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("corrosion_detection_model.h5")

# Function to predict corrosion
def predict_corrosion(image_path):
    img = image.load_img(image_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    if prediction[0] > 0.5:
        print("Predicted: Non-Corroded")
    else:
        print("Predicted: Corroded")

# Example usage
predict_corrosion("/content/drive/MyDrive/dataset/test/corroded/image_0199_jpg.rf.7c029bba2608f88ce94bb32a023742f1.jpg")

from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("corrosion_detection_model.h5")

# Function to predict corrosion
def predict_corrosion(image_path):
    img = image.load_img(image_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    if prediction[0] > 0.5:
        print("Predicted: Non-Corroded")
    else:
        print("Predicted: Corroded")

# Example usage
predict_corrosion("/content/drive/MyDrive/dataset/test/noncorroded/metal1.jpg")

from google.colab import files
uploaded = files.upload()



from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("corrosion_detection_model.h5")

# Function to predict corrosion
def predict_corrosion(image_path):
    img = image.load_img(image_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    if prediction[0] > 0.5:
        print("Predicted: Non-Corroded")
    else:
        print("Predicted: Corroded")

# Example usage
predict_corrosion("/content/drive/MyDrive/dataset/360_F_939433653_S9V955FbM69e6eWesbY40QiaO9rE0reG.jpg")

from google.colab import files
uploaded = files.upload()

from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("corrosion_detection_model.h5")

# Function to predict corrosion
def predict_corrosion(image_path):
    img = image.load_img(image_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    if prediction[0] > 0.5:
        print("Predicted: Non-Corroded")
    else:
        print("Predicted: Corroded")

# Example usage
predict_corrosion("/content/drive/MyDrive/dataset/alloy-steel.webp")

from google.colab import files
uploaded = files.upload()

from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("corrosion_detection_model.h5")

# Function to predict corrosion
def predict_corrosion(image_path):
    img = image.load_img(image_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    if prediction[0] > 0.5:
        print("Predicted: Non-Corroded")
    else:
        print("Predicted: Corroded")

# Example usage
predict_corrosion("/content/drive/MyDrive/dataset/steel-tubes.webp")

from google.colab import files
uploaded = files.upload()

from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("corrosion_detection_model.h5")

# Function to predict corrosion
def predict_corrosion(image_path):
    img = image.load_img(image_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    if prediction[0] > 0.5:
        print("Predicted: Non-Corroded")
    else:
        print("Predicted: Corroded")

# Example usage
predict_corrosion("/content/drive/MyDrive/dataset/underwater-pipeline.jpg")

from google.colab import files
uploaded = files.upload()

from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("corrosion_detection_model.h5")

# Function to predict corrosion
def predict_corrosion(image_path):
    img = image.load_img(image_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    if prediction[0] > 0.5:
        print("Predicted: Non-Corroded")
    else:
        print("Predicted: Corroded")

# Example usage
predict_corrosion("/content/drive/MyDrive/dataset/pool.jpg")

from google.colab import files
uploaded = files.upload()

from tensorflow.keras.models import load_model

# Load the trained model
model = load_model("corrosion_detection_model.h5")

# Function to predict corrosion
def predict_corrosion(image_path):
    img = image.load_img(image_path, target_size=(150, 150))
    img_array = image.img_to_array(img) / 255.0
    img_array = np.expand_dims(img_array, axis=0)

    prediction = model.predict(img_array)
    if prediction[0] > 0.5:
        print("Predicted: Non-Corroded")
    else:
        print("Predicted: Corroded")

# Example usage
predict_corrosion("/content/drive/MyDrive/dataset/steeeeeeel.jpg")

from google.colab import files
files.download('corrosion_detection_model.h5')

import numpy as np
import tensorflow as tf
import matplotlib.pyplot as plt
import seaborn as sns
from tensorflow.keras.preprocessing.image import ImageDataGenerator
from sklearn.metrics import confusion_matrix, classification_report

# Load your trained model
model = tf.keras.models.load_model("corrosion_detection_model.h5")

# Define test directory (Make sure this path is correct)
test_dir = "/content/drive/MyDrive/dataset/train"

# Preprocess test images using ImageDataGenerator
test_datagen = ImageDataGenerator(rescale=1./255)

test_generator = test_datagen.flow_from_directory(
    test_dir,
    target_size=(150, 150),
    batch_size=32,
    class_mode='binary',
    shuffle=False  # Important: Do not shuffle for correct labels
)

# Make predictions on the test set
predictions = model.predict(test_generator)
y_pred = np.where(predictions > 0.5, 1, 0)  # Convert probabilities to binary (0 or 1)
y_true = test_generator.classes  # True labels

# Generate confusion matrix
conf_matrix = confusion_matrix(y_true, y_pred)

# Print classification report
print("Classification Report:\n", classification_report(y_true, y_pred, target_names=["Corroded", "Non-Corroded"]))

# Visualize the confusion matrix
plt.figure(figsize=(5, 4))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=["Corroded", "Non-Corroded"], yticklabels=["Corroded", "Non-Corroded"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

import os
print(os.listdir())  # Lists all files in the current directory